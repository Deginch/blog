# 8 重新组织数据
### 8.6 对观察者模式下的数据进行拷贝处理
这个方法主要是讲在编写GUI程序的时候，如果在逻辑处理的部分需要用到GUI的属性，可以考虑每次将GUI的数据拷贝再进行逻辑处理，这样可以更加清晰的将界面与逻辑拆分。
### 8.7 将单向关联改成双向关联
这个方法讲的是如果两个类都持有对方的引用，如何设置哪个类来控制关联关系。主要有以下三点规则。
1. 如果两个类是一对多的关系，例如Order订单包含一个Costumer用户，但是一个Costumer包含有多个Order，则Order具有控制关联关系。
2. 如果A类是B类的部件，那么由B类来控制关联关系。
3. 如果两个类是多对多的关系，那么随便哪个类来控制关联关系都可以。
  ps：控制关联关系就是是set两个类之间引用。
### 8.8 将双向关联改变成单向关联
如果两个类互相持有对方的引用，应当考虑是否可以将这种双向引用改变成单向引用。
假设A和B互相持有对方的引用，改变双向关联方法有两种：
1. 将B中用到A的函数改变成需要传入参数A的函数
```java
class B{
	private A a;
	public void handleA(){
		//对a进行处理
	}
}
```
改成下面方式
```java
class B{
	public void handleA(A a){
		//对a进行处理
	}
}

```

2. 将B中用到A的函数改变成从特定地方搜索指定的A再进行处理
```java
class B{
	public void handleA(){
		for(A a:A.getAll()){
			if(a.isForB(this)){
				//对a进行处理
				return;
			}
		}
	}

}
```
这样虽然可能会带来效率问题，需要结合具体情况分析。
### 8.9 以常量取代魔法数
意思是将程序中用到的固定数字都用静态变量来替代以增加程序可读性。
### 8.10 封装字段 

类的所有字段都应该是private，需要外部访问的加上getter和setter即可。

### 8.11 封装集合

如果类中包含集合，不要直接将集合用getter返回，而是添加add(),remove(),iterator()等方法来封装这个集合。主要目的是防止外面的用户不按照规定对这个字段进行操作，例如直接置null或者置成一个新的集合。

### 8.12 用数据类取代记录

就是跟名字差不多意思，主要是为了将来做准备。

### 8.13 用类来取代状态码

如果一个类拥有状态码，可以使用类来替代，这样可以在set和get的进行类型检查，保证程序更加安全

```java
class Person{
  public static final int A=1;
  public static final int B=2;
  public static final int AB=3;
  public static final int O=4;
  
  private int blood;
  
  public void setBlood(int blood){
    this.blood = blood;
  }
}
```

进行如下改变

```java
class Person{
  private Blood blood;
  
  public void setBlood(Blood blood){
    this.blood = blood;
  }
}

enum Blood{
  A,B,AB,O;
}
```

### 8.14-8.15 用多态/state/strategy取代类型码

如果一个类拥有状态码，并且利用这个状态码进行一些行为操作

1. 如果状态码是固定的不会发生改变，可以使用子类继承实现多态来完成进行设计。
2. 如果状态码会发生，可以使用state/strategy（状态机、策略模式）来完成设计。

### 8.16 用字段取代子类

如果子类仅仅是继承父类抽象方法用来配置一些字段的话，不如直接使用字段，减少类的复杂程度。